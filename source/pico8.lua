-- level structure
-- 1-9 = box 1-9
-- 10 = right
-- 11 = up
-- 12 = left
-- 13 = down
-- 14 = start
-- 15 = end
-- 16 = t1
-- 17 = t2
-- 18 = t3
-- 19 = t1
-- 20 = t2
-- 21 = t3
-- 22 = up right //1-up, 2-right, 4-down,8-left
-- 23 =
-- 24 = up down
-- 25 = down right
-- 26 = up down right
-- 27 =
-- 28 = up left
-- 29 = left right
-- 30 = up left right
-- 31 = left down
-- 32 = up down left
-- 33 = down left right
-- 34 = up down left right
-- 

local gfx = playdate.graphics

level = {}
level[1] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,1,1,1,1,1,1,1,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[2] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[3] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,14,1,1,1,2,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[4] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,12,1,1,1,14,0,0,1,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[5] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,10,1,1,1,1,1,0,0,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,15,1,1,12,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[6] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[7] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,28,1,1,14,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[8] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,1,1,1,1,1,1,1,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,1,1,1,1,1,1,1,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[9] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,19,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,17,0,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,1,1,1,1,1,1,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[10] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,15,2,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,1,0,1,2,14,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[11] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,19,0,20,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,2,1,2,1,2,15,0,0,0,0,2,0,1,0,1,0,0,0,0,0,2,1,2,1,2,0,0,0,0,0,1,0,1,0,2,0,0,0,0,0,1,1,3,1,2,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0,17,0,1,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[12] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,15,0,0,0,0,0,0,0,1,19,1,0,0,1,16,1,0,0,1,2,2,0,0,1,1,3,14,0,0,0,0,0,0,1,12,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[13] = {0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,19,1,15,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,14,1,16,1,0,0,0,0,0,1,1,1,1,1}
level[14] = {0,0,0,0,1,1,1,1,0,0,0,0,0,0,13,0,0,1,0,0,0,1,1,1,2,1,1,2,14,0,0,13,0,0,1,0,0,11,0,0,0,1,1,1,2,1,1,1,0,0,0,0,0,0,16,0,0,15,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,2,16,0,0,0,0,0,11,1,14,2,1,0,0,0,0,0,1,2,2,11,1,0,0,0,0,0,1,19,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,2,2,2,3,0,0,0,0,0,0,2,0,0,2,0,0,0,0,15,2,3,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[16] = {0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,1,2,0,1,0,0,0,0,1,14,0,2,3,1,0,0,0,0,2,2,1,0,2,0,0,0,0,0,1,0,2,1,2,1,1,0,1,1,2,1,2,0,1,0,1,0,1,0,1,0,2,2,2,1,1,0,1,1,2,1,1,0,0,15,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[17] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,3,16,1,0,0,0,0,0,1,14,3,1,2,15,0,0,0,19,1,1,1,1,2,0,0,0,0,1,0,0,20,2,2,0,0,0,0,1,1,10,1,1,1,0,0,0,0,1,2,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,16,2,2,2,0,0,0,0,0,1,1,13,1,3,0,0,0,0,1,2,2,2,12,3,0,0,0,0,13,11,13,2,10,2,0,0,0,0,1,2,3,3,1,2,1,1,0,1,2,2,1,0,0,1,0,1,0,1,2,2,2,0,0,1,0,1,0,1,1,1,2,1,1,1,15,1,0,1,19,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0}
level[19] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,14,1,0,0,0,0,0,0,0,2,3,1,0,0,0,0,0,0,0,2,3,1,0,0,0,0,0,0,16,2,29,1,19,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,15,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,14,3,16,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,17,3,19,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,15,3,20,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[21] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,19,0,0,0,0,0,0,0,2,1,0,0,0,0,0,0,1,17,1,0,0,0,0,0,1,1,2,1,0,0,0,0,0,0,2,1,15,1,0,0,0,0,0,0,2,2,1,1,0,0,0,0,0,0,20,1,0,0,0,0,0,0,1,1,2,1,0,0,0,0,0,0,2,33,2,0,0,0,0,0,0,0,2,1,2,0,0,0,0,0,0,0,2,2,1,0,0,0,0,0,0,0,1,1,16,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0}
level[22] = {0,0,0,0,0,0,0,0,0,0,0,19,1,1,1,1,17,0,0,0,0,1,1,1,1,1,1,0,0,0,0,1,14,2,2,1,1,0,0,0,0,1,1,11,13,13,1,0,0,0,0,16,1,1,1,1,1,0,0,0,0,1,2,2,2,2,20,0,0,0,0,1,2,2,2,2,1,0,0,0,0,1,2,1,15,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[23] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,1,1,0,0,0,0,0,11,14,3,16,1,0,0,0,0,0,3,3,4,3,2,0,15,1,0,0,3,19,13,2,1,0,0,1,0,0,3,3,3,3,1,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[24] = {0,0,0,0,0,0,0,0,0,0,3,2,2,2,2,2,0,0,0,0,2,0,19,0,0,2,0,0,0,0,2,2,2,0,0,2,16,0,0,0,2,0,1,0,0,1,0,0,0,0,2,1,2,0,0,1,0,0,0,0,1,0,2,0,0,1,1,1,1,0,1,2,2,0,0,1,1,2,1,0,0,1,0,0,0,2,1,3,14,0,15,1,0,0,0,2,1,2,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[25] = {0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,2,1,1,2,1,0,0,0,0,0,2,2,29,1,1,0,0,0,0,0,0,24,0,0,1,0,0,0,0,0,20,1,16,0,1,0,0,0,0,0,2,2,2,0,1,0,0,0,0,0,1,14,1,15,1,0,0,0,0,0,1,2,19,2,1,0,0,0,0,0,17,1,1,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[26] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,15,1,12,2,1,1,0,0,0,1,1,1,1,3,10,2,0,0,0,1,1,13,2,3,2,2,0,0,0,1,14,2,2,13,11,1,0,0,0,1,1,13,11,1,1,16,0,0,0,1,2,2,1,1,2,1,0,0,0,1,19,1,1,1,2,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[27] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,15,1,2,20,1,1,0,0,2,3,33,2,2,2,17,1,0,0,2,5,4,2,0,1,1,1,0,0,1,2,2,1,0,0,0,0,0,0,19,2,1,2,0,0,0,0,0,0,1,2,2,2,0,0,0,0,0,0,2,14,1,0,0,0,0,0,0,0,2,1,2,0,0,0,0,0,0,0,1,16,2,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
level[28] = {0,0,0,0,0,0,0,2,3,14,0,0,0,0,0,0,2,2,6,4,0,0,0,0,0,0,2,16,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,3,3,4,0,0,0,0,0,0,0,5,4,3,0,0,0,0,0,0,0,19,4,3,0,0,0,0,0,0,0}
level[29] = {0,1,1,1,0,0,1,2,2,1,0,1,16,2,1,0,2,1,0,15,0,2,1,14,1,0,2,0,0,1,0,2,3,3,4,1,2,2,1,1,0,0,0,0,2,1,0,1,0,0,0,0,0,0,2,1,0,1,0,0,0,0,0,0,3,1,0,1,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,11,2,19,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,0,0,0}
level[30] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,2,1,0,0,0,1,1,1,1,3,30,1,0,0,0,1,1,1,1,2,2,1,0,0,0,1,2,2,10,1,1,15,0,0,0,1,1,11,1,13,1,1,0,0,0,1,1,2,3,2,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
levelact = {}

undox = {}
undoy = {}
undov = {}

what = "menu"
runda = 1

local gameData = playdate.datastore.read()
if gameData then
    runda = gameData.currentLevel
end

animdelay=0
animframe=0
ja = {}
jamove=0
for i=0,14,1 do 
        levelact[i] = {}
end

function checkover(x,y)
    if checkpossible(ja.x-1,ja.y) then 
        if checkpossible2(ja.x,ja.y,2) then
            return true
        end
    end
    if checkpossible(ja.x+1,ja.y) then 
        if checkpossible2(ja.x,ja.y,0) then
            return true
        end
    end
    if checkpossible(ja.x,ja.y-1) then 
        if checkpossible2(ja.x,ja.y,1) then
            return true
        end
    end
    if checkpossible(ja.x,ja.y+1) then 
        if checkpossible2(ja.x,ja.y,3) then
            return true
        end
    end
    return false
end

function checkteleport(x,y)
    temp=levelact[x][y]
    if (temp>=16 and temp<=21) then
        if (temp<=18) then temp2=temp+3
        else temp2=temp-3
        end
        for i2=0,13,1 do
            for i=1,10,1 do
                if (levelact[i][i2]==temp2) then
                    levelact[x][y]=0
                    steleport:play()
                    ja.x=i
                    ja.y=i2
                end
            end
        end
    end
end

function checkcomplete() 
    complete = 0
    for i2=0,13,1 do
        for i=1,10,1 do
            if (levelact[i][i2]>0) then 
                complete=complete+1
            end
        end
    end
    return complete
end

function klocekmin(x,y) 
    --sfx (0)
    undox[undo]=x
    undoy[undo]=y
    undov[undo]=levelact[x][y]
    undo=undo+1
    if (levelact[x][y]>0 and levelact[x][y]<10) then levelact[x][y]=levelact[x][y]-1
    end
    if (levelact[x][y]>=10 and levelact[x][y]<35) then levelact[x][y]=0
    end
end

function checkpossible(x,y)
    if (x<1 or x>10 or y<0 or y>13) then return false
    end
    if (levelact[x][y]==15 and checkcomplete()==2) then return true
    end
    if (levelact[x][y]>0 and levelact[x][y]<14) then return true
    end
    if (levelact[x][y]>15) then return true
    end
    return false
end

function checkpossible2(x,y,kierunek) -- check other blocks
    if (levelact[x][y]<10 or levelact[x][y]==14 or levelact[x][y]==15) then return true
    end
    if (levelact[x][y]==10 and kierunek==0) then return true
    end
    if (levelact[x][y]==11 and kierunek==1) then return true
    end
    if (levelact[x][y]==12 and kierunek==2) then return true
    end
    if (levelact[x][y]==13 and kierunek==3) then return true
    end
    if (levelact[x][y]>=16 and levelact[x][y]<=21) then return true
    end
    if (levelact[x][y]>=22) then
        temp=levelact[x][y]-19
        if (temp>=8 and kierunek==2) then
            temp=temp-8
            return true
        end
        if (temp>=4 and kierunek==3) then
            temp=temp-4
            return true
        end
        if (temp>=2 and kierunek==0) then
            temp=temp-2
            return true
        end
        if (temp>=1 and kierunek==1) then
            temp=temp-2
            return true
        end
    end
    return false
end

function animdelayproc() 
    startactive = false
    ja.animdelay=ja.animdelay+1
    if (ja.animdelay>1) then
        ja.animdelay=0
        ja.animframe = ja.animframe+1
        if (ja.animframe>7) then ja.animframe=0
        end
    end
end

function animtime()
    animdelay=animdelay+1
    if animdelay>0 then
        animdelay=0
        animframe=animframe+1
        if animframe>30 then
            animframe=0
        end
    end
end

function drawja()
    if (jamove==0) then animse=1
    end
    if (jamove==1) then animse=17
    end
    if (jamove==2) then animse=1
    end
    if (jamove==3) then animse=9
    end
    if (jamove==4) then animse=25
    end
    --spr (animse+ja.animframe,12+(ja.x*8)+ja.xo,6+(ja.y*8)+ja.yo)
    gfx.setLineWidth(2)
    gfx.drawCircleAtPoint(104+8+(ja.x*16)+ja.xo,8+8+(ja.y*16)+ja.yo,animframe)
    player:drawImage(animse+ja.animframe,104+(ja.x*16)+ja.xo,8+(ja.y*16)+ja.yo)
end


function drawboard() 
    for i2=0,13,1 do
        for i=1,10,1 do
            --spr (levelact[i][i2],12+(i*8),6+(i2*8))
            grafika:drawImage(levelact[i][i2]+1,104+(i*16),8+(i2*16))
        end
    end
end

function drawboardeffect()  
    gfx.setColor(gfx.kColorWhite)
    gfx.setLineWidth(1)

    if (startactive==true) then
        --gfx.drawRect(104+p1.x*16-1-animframe,8+p1.y*16-1-animframe,16+1+animframe*2,16+1+animframe*2)
    else
        --gfx.drawRect(104+p2.x*16-1-animframe,8+p2.y*16-1-animframe,16+1+animframe*2,16+1+animframe*2)
    end
    
end

p1 = {}
p2 = {}
function startlevel()
    for i2=0,14,1 do
        for i=1,10,1 do
        levelact[i][i2] = level[runda][i+i2*10]
        jakiklocek = level[runda][i+i2*10]
            if (jakiklocek==14) then
                ja.x=i
                ja.y=i2
                p1.x=i
                p1.y=i2
            end
            if (jakiklocek==15) then
                p2.x=i
                p2.y=i2
            end       
        end
    end
    for i=1,100,1 
    do 
        undox[i] = -1
        undoy[i] = -1
        undov[i] = -1
    end
    undo=1
    startactive = true
    ja.animframe=0
    ja.animdelay=0
    ja.xo=0
    ja.yo=0
    jamove=0 --1-left 2-right 3-up 4-down
    --what="prelevel"
end

